/* Generated By:JavaCC: Do not edit this line. CalculadoraConstants.java */
package Calculadora;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface CalculadoraConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int PLUS = 5;
  /** RegularExpression Id. */
  int MINUS = 6;
  /** RegularExpression Id. */
  int MULTIPLY = 7;
  /** RegularExpression Id. */
  int DIVIDE = 8;
  /** RegularExpression Id. */
  int ELEVADO = 9;
  /** RegularExpression Id. */
  int G = 10;
  /** RegularExpression Id. */
  int L = 11;
  /** RegularExpression Id. */
  int GEQ = 12;
  /** RegularExpression Id. */
  int LEQ = 13;
  /** RegularExpression Id. */
  int EQ = 14;
  /** RegularExpression Id. */
  int GR = 15;
  /** RegularExpression Id. */
  int LR = 16;
  /** RegularExpression Id. */
  int GEQR = 17;
  /** RegularExpression Id. */
  int LEQR = 18;
  /** RegularExpression Id. */
  int EQR = 19;
  /** RegularExpression Id. */
  int GI = 20;
  /** RegularExpression Id. */
  int LI = 21;
  /** RegularExpression Id. */
  int GEQI = 22;
  /** RegularExpression Id. */
  int LEQI = 23;
  /** RegularExpression Id. */
  int EQI = 24;
  /** RegularExpression Id. */
  int IF = 25;
  /** RegularExpression Id. */
  int ELIF = 26;
  /** RegularExpression Id. */
  int THEN = 27;
  /** RegularExpression Id. */
  int ELSE = 28;
  /** RegularExpression Id. */
  int EOLn = 29;
  /** RegularExpression Id. */
  int DECIMAL = 30;
  /** RegularExpression Id. */
  int OCTAL = 31;
  /** RegularExpression Id. */
  int BINARIO = 32;
  /** RegularExpression Id. */
  int HEXADECIMAL = 33;
  /** RegularExpression Id. */
  int DIGITO = 34;
  /** RegularExpression Id. */
  int DIGITODECIMAL = 35;
  /** RegularExpression Id. */
  int ENTERO = 36;
  /** RegularExpression Id. */
  int VARIABLE = 37;
  /** RegularExpression Id. */
  int LETRA = 38;
  /** RegularExpression Id. */
  int I = 39;
  /** RegularExpression Id. */
  int E = 40;
  /** RegularExpression Id. */
  int PI = 41;
  /** RegularExpression Id. */
  int IGUAL = 42;
  /** RegularExpression Id. */
  int ROOT = 43;
  /** RegularExpression Id. */
  int EXTENDEDROOT = 44;
  /** RegularExpression Id. */
  int SINGLEROOT = 45;
  /** RegularExpression Id. */
  int TINDEPENDIENTE = 46;
  /** RegularExpression Id. */
  int HELP = 47;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\t\"",
    "\"\\r\"",
    "\"\\n\"",
    "\"+\"",
    "\"-\"",
    "\"*\"",
    "\"/\"",
    "\"^\"",
    "\">\"",
    "\"<\"",
    "\">=\"",
    "\"<=\"",
    "\"==\"",
    "\">R\"",
    "\"<R\"",
    "\">=R\"",
    "\"<=R\"",
    "\"==R\"",
    "\">I\"",
    "\"<I\"",
    "\">=I\"",
    "\"<=I\"",
    "\"==I\"",
    "<IF>",
    "<ELIF>",
    "<THEN>",
    "<ELSE>",
    "\";\"",
    "\"d\"",
    "\"o\"",
    "\"b\"",
    "\"h\"",
    "<DIGITO>",
    "<DIGITODECIMAL>",
    "<ENTERO>",
    "<VARIABLE>",
    "<LETRA>",
    "\"#i\"",
    "\"#e\"",
    "\"#pi\"",
    "\"=\"",
    "\"#root\"",
    "\"#extendedRoot\"",
    "\"#singleRoot\"",
    "\"X\"",
    "\"Help\"",
    "\"(\"",
    "\")\"",
    "\".\"",
    "\",\"",
    "\":\"",
  };

}
