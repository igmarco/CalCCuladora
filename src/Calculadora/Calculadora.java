/* Generated By:JavaCC: Do not edit this line. Calculadora.java */
package Calculadora;
import Tools.Complejo;
import Tools.ExcepcionDivideCero;
import java.util.HashMap;

public class Calculadora implements CalculadoraConstants {
  static HashMap < String, Complejo > variables = new HashMap < String, Complejo > ();

  public static void main(String args []) throws ParseException
  {
    Calculadora parser = new Calculadora(System.in);
    while (true)
    {
      System.out.println("---------------------------------------------------------------------------------------------------------------");
      System.out.println("------------------------------------------------| CALCULADORA |------------------------------------------------");
      System.out.println("---------------------------------------------------------------------------------------------------------------");
      System.out.println("");
      System.out.println("Inicio (\u005c"Help;\u005c" abre la ayuda):");
      try
      {
        Calculadora.sesion();
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        Calculadora.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  public static boolean compara(String comparador, Complejo exp1, Complejo exp2)
  {
    boolean resultado = false;
    switch (comparador)
    {
      case ">" :
      resultado = (exp1.getReal() > exp2.getReal() || exp1.getImag() > exp2.getImag());
      break;
      case "<" :
      resultado = (exp1.getReal() < exp2.getReal() || exp1.getImag() < exp2.getImag());
      break;
      case "==" :
      resultado = (exp1.getReal() == exp2.getReal() && exp1.getImag() == exp2.getImag());
      break;
      case ">=" :
      resultado = (exp1.getReal() >= exp2.getReal() || exp1.getImag() >= exp2.getImag());
      break;
      case "<=" :
      resultado = (exp1.getReal() <= exp2.getReal() || exp1.getImag() <= exp2.getImag());
      break;
      case ">NS" :
      resultado = (exp1.getReal() > exp2.getReal() || exp1.getImag() > exp2.getImag());
      break;
      case "<NS" :
      resultado = (exp1.getReal() < exp2.getReal() || exp1.getImag() < exp2.getImag());
      break;
      case "==NS" :
      resultado = (exp1.getReal() == exp2.getReal() || exp1.getImag() == exp2.getImag());
      break;
      case ">=NS" :
      resultado = (exp1.getReal() >= exp2.getReal() || exp1.getImag() >= exp2.getImag());
      break;
      case "<=NS" :
      resultado = (exp1.getReal() <= exp2.getReal() || exp1.getImag() <= exp2.getImag());
      break;
      case ">S" :
      resultado = (exp1.getReal() > exp2.getReal() && exp1.getImag() > exp2.getImag());
      break;
      case "<S" :
      resultado = (exp1.getReal() < exp2.getReal() && exp1.getImag() < exp2.getImag());
      break;
      case ">=S" :
      resultado = (exp1.getReal() >= exp2.getReal() && exp1.getImag() >= exp2.getImag());
      break;
      case "<=S" :
      resultado = (exp1.getReal() <= exp2.getReal() && exp1.getImag() <= exp2.getImag());
      break;
      case ">R" :
      resultado = (exp1.getReal() > exp2.getReal());
      break;
      case "<R" :
      resultado = (exp1.getReal() < exp2.getReal());
      break;
      case "==R" :
      resultado = (exp1.getReal() == exp2.getReal());
      break;
      case ">=R" :
      resultado = (exp1.getReal() >= exp2.getReal());
      break;
      case "<=R" :
      resultado = (exp1.getReal() <= exp2.getReal());
      break;
      case ">I" :
      resultado = (exp1.getImag() > exp2.getImag());
      break;
      case "<I" :
      resultado = (exp1.getImag() < exp2.getImag());
      break;
      case "==I" :
      resultado = (exp1.getImag() == exp2.getImag());
      break;
      case ">=I" :
      resultado = (exp1.getImag() >= exp2.getImag());
      break;
      case "<=I" :
      resultado = (exp1.getImag() <= exp2.getImag());
      break;
    }
    return resultado;
  }

  static final public void sesion() throws ParseException {
  String resultado;
  variables.clear();
  variables.put
  (
    "$", new Complejo()
  )
  ;
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MINUS:
      case IF:
      case DIGITO:
      case VARIABLE:
      case I:
      case E:
      case PI:
      case HELP:
      case 42:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case HELP:
        jj_consume_token(HELP);
        jj_consume_token(EOLn);
      System.out.println("---------------------------------------------------------------------------------------------------------------");
      System.out.println("---------- INSTRUCCIONES DE LA CALCULADORA --------------------------------------------------------------------");
      System.out.println("---------------------------------------------------------------------------------------------------------------");
      System.out.println("------------ Instrucciones terminadas en \u005c";\u005c". -----------------------------------------------------------------");
      System.out.println("------------ Admite decimales, binarios, octales y hexadecimales, si los ponemos ------------------------------");
      System.out.println("------------ seguidos de d (por defecto), b, o y h. -----------------------------------------------------------");
      System.out.println("------------ Permite utilizar los valores e, i y pi con \u005c'#e\u005c', \u005c'#i\u005c' y \u005c'#pi\u005c' respectivamente. -------------------");
      System.out.println("------------ Soporta potencias de base compleja y exponente compleja. -----------------------------------------");
      System.out.println("------------ El \u005c'.\u005c' sirve para denotar decimales. -------------------------------------------------------------");
      System.out.println("------------ Las variables deben estar formadas \u00fanicamente por min\u00fasculas. ------------------------------------");
      System.out.println("------------ Soporta condicionales definidos de la siguiente forma:  ------------------------------------------");
      System.out.println("--------------------- si ([expresi\u00f3n] [comparador] [expresi\u00f3n]) entonces [expresi\u00f3n] --------------------------");
      System.out.println("--------------------- si no, si ([expresi\u00f3n] [comparador] [expresi\u00f3n]) entonces [expresi\u00f3n] -------------------");
      System.out.println("--------------------- si no [expresi\u00f3n] -----------------------------------------------------------------------");
      System.out.println("------------ Soporta tambi\u00e9n condicionales definidos de la siguiente forma:  ----------------------------------");
      System.out.println("--------------------- ([comparador],[expresi\u00f3n],[expresi\u00f3n]) [expresi\u00f3nS\u00ed] : [expresi\u00f3nNo] --------------------");
      System.out.println("------------ Por supuesto, soporta anidamiento de condicionales (incluso dentro de ----------------------------");
      System.out.println("------------ las propias condiciones). ------------------------------------------------------------------------");
      System.out.println("---------------------------------------------------------------------------------------------------------------");
        break;
      case MINUS:
      case IF:
      case DIGITO:
      case VARIABLE:
      case I:
      case E:
      case PI:
      case 42:
        resultado = linea();
      System.out.println("> " + resultado);
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    }
    jj_consume_token(0);
    System.out.println("Fin del c\u00e1lculo.");
  }

  static final public String linea() throws ParseException {
  Complejo resultadoCmplx;
  String resultado;
    if (jj_2_1(2)) {
      resultadoCmplx = asignacion();
      resultado = resultadoCmplx.toString();
    } else if (jj_2_2(2)) {
      resultadoCmplx = expresion();
      variables.replace("$", resultadoCmplx);
      resultado = resultadoCmplx.toString();
    } else if (jj_2_3(2)) {
      resultadoCmplx = condicional1();
      variables.replace("$", resultadoCmplx);
      resultado = resultadoCmplx.toString();
    } else if (jj_2_4(2)) {
      resultadoCmplx = condicional2();
      variables.replace("$", resultadoCmplx);
      resultado = resultadoCmplx.toString();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(EOLn);
    {if (true) return resultado;}
    throw new Error("Missing return statement in function");
  }

//------- COMIENZO ASIGNACIÓN -------
  static final public Complejo asignacion() throws ParseException {
  Token variableToken;
  String variable;
  Complejo valor;
    variableToken = jj_consume_token(VARIABLE);
    variable = variableToken.image;
    jj_consume_token(IGUAL);
    valor = expresion();
    variables.put(variable, valor);
    {if (true) return valor;}
    throw new Error("Missing return statement in function");
  }

//------- COMIENZO EXPRESIÓN GENERAL (EXPRESIÓN NUMÉRICA O CONDICIONAL) -------
  static final public Complejo expresion() throws ParseException {
  Complejo resultado;
    if (jj_2_5(2)) {
      resultado = expresionNum();
    } else if (jj_2_6(2)) {
      resultado = condicional1();
    } else if (jj_2_7(2)) {
      resultado = condicional2();
    } else {
      jj_consume_token(-1);
      throw new ParseException();
    }
    {if (true) return resultado;}
    throw new Error("Missing return statement in function");
  }

//------- COMIENZO EXPRESIÓN NUMÉRICA -------
  static final public Complejo expresionNum() throws ParseException {
  Complejo parcial;
  Complejo resultado;
  boolean resta;
    resultado = termino();
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
      case MINUS:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PLUS:
        jj_consume_token(PLUS);
        resta = false;
        break;
      case MINUS:
        jj_consume_token(MINUS);
        resta = true;
        break;
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      parcial = termino();
      resultado = resta ? Complejo.suma(resultado, Complejo.opuesto(parcial)) : Complejo.suma(resultado, parcial);
    }
    {if (true) return resultado;}
    throw new Error("Missing return statement in function");
  }

//------- COMIENZO SUMAS-PRODUCTOS -------
  static final public Complejo termino() throws ParseException {
  Complejo parcial;
  Complejo resultado;
  boolean division;
    resultado = factor();
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
      case DIVIDE:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_3;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MULTIPLY:
        jj_consume_token(MULTIPLY);
        division = false;
        break;
      case DIVIDE:
        jj_consume_token(DIVIDE);
        division = true;
        break;
      default:
        jj_la1[5] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      parcial = factor();
      try
      {
        resultado = division ? Complejo.cociente(resultado, parcial) : Complejo.producto(resultado, parcial);
      }
      catch (Exception e)
      {
        resultado = new Complejo();
        System.out.println("> Error");
      }
    }
    {if (true) return resultado;}
    throw new Error("Missing return statement in function");
  }

  static final public Complejo factor() throws ParseException {
  boolean negativo = false;
  Complejo resultadoComplejo;
  Complejo potencia;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MINUS:
      jj_consume_token(MINUS);
      negativo = true;
      break;
    default:
      jj_la1[6] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGITO:
    case VARIABLE:
    case I:
    case E:
    case PI:
      resultadoComplejo = numero();
      break;
    case 42:
      jj_consume_token(42);
      resultadoComplejo = expresion();
      jj_consume_token(43);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
      if (negativo) resultadoComplejo = Complejo.opuesto(resultadoComplejo);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ELEVADO:
      jj_consume_token(ELEVADO);
      potencia = factor();
      resultadoComplejo = Complejo.potencia(resultadoComplejo, potencia);
      break;
    default:
      jj_la1[8] = jj_gen;
      ;
    }
    {if (true) return resultadoComplejo;}
    throw new Error("Missing return statement in function");
  }

//------- COMIENZO NÚMEROS -------
  static final public Complejo numero() throws ParseException {
  Token variableToken;
  double num;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGITO:
      num = numeroNoSimbolico();
    {if (true) return new Complejo(num, 0);}
      break;
    case PI:
      jj_consume_token(PI);
    {if (true) return new Complejo(3.141592653, 0);}
      break;
    case E:
      jj_consume_token(E);
    {if (true) return new Complejo(2.718281828, 0);}
      break;
    case I:
      jj_consume_token(I);
    {if (true) return new Complejo(0, 1);}
      break;
    case VARIABLE:
      variableToken = jj_consume_token(VARIABLE);
    {if (true) return (variables.containsKey(variableToken.image)) ? variables.get(variableToken.image) : new Complejo();}
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static final public double numeroNoSimbolico() throws ParseException {
  String numInt, numFrac = "", digitos;
  double numIntDecimal = 0;
  double numFracDecimal = 0;
  int cifra;
    numInt = cifras();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 44:
      jj_consume_token(44);
      numFrac = cifras();
      break;
    default:
      jj_la1[10] = jj_gen;
      ;
    }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DECIMAL:
    case OCTAL:
    case BINARIO:
    case HEXADECIMAL:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case DECIMAL:
        jj_consume_token(DECIMAL);
      for (int i = 0; i < numInt.length(); i++)
      {
        if (numInt.toCharArray() [ i ] - 65 >= 0) cifra = numInt.toCharArray() [ i ] - 55;
        else cifra = numInt.toCharArray() [ i ] - 48;
        numIntDecimal = numIntDecimal * 10 + cifra;
      }
      for (int j = numFrac.length() - 1; j >= 0; j--)
      {
        if (numFrac.toCharArray() [ j ] - 65 >= 0) cifra = numFrac.toCharArray() [ j ] - 55;
        else cifra = numFrac.toCharArray() [ j ] - 48;
        numFracDecimal = numFracDecimal / 10 + cifra;
      }
      {if (true) return numIntDecimal + numFracDecimal / 10;}
        break;
      case OCTAL:
        jj_consume_token(OCTAL);
      for (int i = 0; i < numInt.length(); i++)
      {
        if (numInt.toCharArray() [ i ] - 65 >= 0) cifra = numInt.toCharArray() [ i ] - 55;
        else cifra = numInt.toCharArray() [ i ] - 48;
        numIntDecimal = numIntDecimal * 8 + cifra;
      }
      for (int j = numFrac.length() - 1; j >= 0; j--)
      {
        if (numFrac.toCharArray() [ j ] - 65 >= 0) cifra = numFrac.toCharArray() [ j ] - 55;
        else cifra = numFrac.toCharArray() [ j ] - 48;
        numFracDecimal = numFracDecimal / 8 + cifra;
      }
      {if (true) return numIntDecimal + numFracDecimal / 8;}
        break;
      case BINARIO:
        jj_consume_token(BINARIO);
      for (int i = 0; i < numInt.length(); i++)
      {
        if (numInt.toCharArray() [ i ] - 65 >= 0) cifra = numInt.toCharArray() [ i ] - 55;
        else cifra = numInt.toCharArray() [ i ] - 48;
        numIntDecimal = numIntDecimal * 2 + cifra;
      }
      for (int j = numFrac.length() - 1; j >= 0; j--)
      {
        if (numFrac.toCharArray() [ j ] - 65 >= 0) cifra = numFrac.toCharArray() [ j ] - 55;
        else cifra = numFrac.toCharArray() [ j ] - 48;
        numFracDecimal = numFracDecimal / 2 + cifra;
      }
      {if (true) return numIntDecimal + numFracDecimal / 2;}
        break;
      case HEXADECIMAL:
        jj_consume_token(HEXADECIMAL);
      for (int i = 0; i < numInt.length(); i++)
      {
        if (numInt.toCharArray() [ i ] - 65 >= 0) cifra = numInt.toCharArray() [ i ] - 55;
        else cifra = numInt.toCharArray() [ i ] - 48;
        numIntDecimal = numIntDecimal * 16 + cifra;
      }
      for (int j = numFrac.length() - 1; j >= 0; j--)
      {
        if (numFrac.toCharArray() [ j ] - 65 >= 0) cifra = numFrac.toCharArray() [ j ] - 55;
        else cifra = numFrac.toCharArray() [ j ] - 48;
        numFracDecimal = numFracDecimal / 16 + cifra;
      }
      {if (true) return numIntDecimal + numFracDecimal / 16;}
        break;
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      break;
    default:
      jj_la1[12] = jj_gen;
      ;
    }
    for (int i = 0; i < numInt.length(); i++)
    {
      if (numInt.toCharArray() [ i ] - 65 >= 0) cifra = numInt.toCharArray() [ i ] - 55;
      else cifra = numInt.toCharArray() [ i ] - 48;
      numIntDecimal = numIntDecimal * 10 + cifra;
    }
    for (int j = numFrac.length() - 1; j >= 0; j--)
    {
      if (numFrac.toCharArray() [ j ] - 65 >= 0) cifra = numFrac.toCharArray() [ j ] - 55;
      else cifra = numFrac.toCharArray() [ j ] - 48;
      numFracDecimal = numFracDecimal / 10 + cifra;
    }
    {if (true) return numIntDecimal + numFracDecimal / 10;}
    throw new Error("Missing return statement in function");
  }

  static final public String cifras() throws ParseException {
  Token d;
  String num, post;
    d = jj_consume_token(DIGITO);
    num = d.image;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DIGITO:
      post = cifras();
      num += post;
      break;
    default:
      jj_la1[13] = jj_gen;
      ;
    }
    {if (true) return num;}
    throw new Error("Missing return statement in function");
  }

//------- COMIENZO CONDICIONAL: PRIMER TIPO -------
  static final public Complejo condicional1() throws ParseException {
  Token compToken;
  String comparador;
  boolean cond = true;
  Complejo exp1, exp2;
  Complejo expEntonces;
  Complejo expSiNo;
  Complejo resultado = null;
    jj_consume_token(42);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case G:
      compToken = jj_consume_token(G);
      break;
    case L:
      compToken = jj_consume_token(L);
      break;
    case GEQ:
      compToken = jj_consume_token(GEQ);
      break;
    case LEQ:
      compToken = jj_consume_token(LEQ);
      break;
    case EQ:
      compToken = jj_consume_token(EQ);
      break;
    case GR:
      compToken = jj_consume_token(GR);
      break;
    case LR:
      compToken = jj_consume_token(LR);
      break;
    case GEQR:
      compToken = jj_consume_token(GEQR);
      break;
    case LEQR:
      compToken = jj_consume_token(LEQR);
      break;
    case EQR:
      compToken = jj_consume_token(EQR);
      break;
    case GI:
      compToken = jj_consume_token(GI);
      break;
    case LI:
      compToken = jj_consume_token(LI);
      break;
    case GEQI:
      compToken = jj_consume_token(GEQI);
      break;
    case LEQI:
      compToken = jj_consume_token(LEQI);
      break;
    case EQI:
      compToken = jj_consume_token(EQI);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    comparador = compToken.image;
    jj_consume_token(45);
    exp1 = expresion();
    jj_consume_token(45);
    exp2 = expresion();
    jj_consume_token(43);
    cond = Calculadora.compara(comparador, exp1, exp2);
    expEntonces = expresion();
    if (cond) resultado = expEntonces;
    jj_consume_token(46);
    expSiNo = expresion();
    if (!cond) resultado = expSiNo;
    {if (true) return resultado;}
    throw new Error("Missing return statement in function");
  }

//------- COMIENZO CONDICIONAL: SEGUNDO TIPO -------
  static final public Complejo condicional2() throws ParseException {
  String comparador;
  Complejo exp1, exp2;
  Complejo entonces = new Complejo(), sino;
  int i = 0;
  boolean condicion = false;
  boolean condiciones [ ] = new boolean [ 50 ];
  Complejo entonceses [ ] = new Complejo [ 50 ];
    jj_consume_token(IF);
    jj_consume_token(42);
    exp1 = expresion();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case G:
      comparador = jj_consume_token(G).image;
      break;
    case L:
      comparador = jj_consume_token(L).image;
      break;
    case GEQ:
      comparador = jj_consume_token(GEQ).image;
      break;
    case LEQ:
      comparador = jj_consume_token(LEQ).image;
      break;
    case EQ:
      comparador = jj_consume_token(EQ).image;
      break;
    case GR:
      comparador = jj_consume_token(GR).image;
      break;
    case LR:
      comparador = jj_consume_token(LR).image;
      break;
    case GEQR:
      comparador = jj_consume_token(GEQR).image;
      break;
    case LEQR:
      comparador = jj_consume_token(LEQR).image;
      break;
    case EQR:
      comparador = jj_consume_token(EQR).image;
      break;
    case GI:
      comparador = jj_consume_token(GI).image;
      break;
    case LI:
      comparador = jj_consume_token(LI).image;
      break;
    case GEQI:
      comparador = jj_consume_token(GEQI).image;
      break;
    case LEQI:
      comparador = jj_consume_token(LEQI).image;
      break;
    case EQI:
      comparador = jj_consume_token(EQI).image;
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    exp2 = expresion();
    jj_consume_token(43);
    jj_consume_token(THEN);
    entonceses [ i ] = expresion();
    condiciones [ i ] = Calculadora.compara(comparador, exp1, exp2);
    ++i;
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ELIF:
        ;
        break;
      default:
        jj_la1[16] = jj_gen;
        break label_4;
      }
      jj_consume_token(ELIF);
      jj_consume_token(42);
      exp1 = expresion();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case G:
        comparador = jj_consume_token(G).image;
        break;
      case L:
        comparador = jj_consume_token(L).image;
        break;
      case GEQ:
        comparador = jj_consume_token(GEQ).image;
        break;
      case LEQ:
        comparador = jj_consume_token(LEQ).image;
        break;
      case EQ:
        comparador = jj_consume_token(EQ).image;
        break;
      case GR:
        comparador = jj_consume_token(GR).image;
        break;
      case LR:
        comparador = jj_consume_token(LR).image;
        break;
      case GEQR:
        comparador = jj_consume_token(GEQR).image;
        break;
      case LEQR:
        comparador = jj_consume_token(LEQR).image;
        break;
      case EQR:
        comparador = jj_consume_token(EQR).image;
        break;
      case GI:
        comparador = jj_consume_token(GI).image;
        break;
      case LI:
        comparador = jj_consume_token(LI).image;
        break;
      case GEQI:
        comparador = jj_consume_token(GEQI).image;
        break;
      case LEQI:
        comparador = jj_consume_token(LEQI).image;
        break;
      case EQI:
        comparador = jj_consume_token(EQI).image;
        break;
      default:
        jj_la1[17] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      exp2 = expresion();
      jj_consume_token(43);
      jj_consume_token(THEN);
      entonceses [ i ] = expresion();
      condiciones [ i ] = Calculadora.compara(comparador, exp1, exp2);
      ++i;
    }
    jj_consume_token(ELSE);
    sino = expresion();
    for (int j = 0; j < condiciones.length; ++j)
    {
      if (condiciones [ j ])
      {
        condicion = true;
        entonces = entonceses [ j ];
        break;
      }
    }
    if (condicion)
    {if (true) return entonces;}
    else
    {if (true) return sino;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  static private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  static private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  static private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  static private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  static private boolean jj_2_7(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_7(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(6, xla); }
  }

  static private boolean jj_3R_24() {
    if (jj_scan_token(PI)) return true;
    return false;
  }

  static private boolean jj_3R_15() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_22() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_23()) {
    jj_scanpos = xsp;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) return true;
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_23() {
    if (jj_3R_28()) return true;
    return false;
  }

  static private boolean jj_3R_14() {
    if (jj_scan_token(PLUS)) return true;
    return false;
  }

  static private boolean jj_3R_11() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) return true;
    }
    return false;
  }

  static private boolean jj_3R_36() {
    if (jj_scan_token(HEXADECIMAL)) return true;
    return false;
  }

  static private boolean jj_3R_9() {
    if (jj_3R_10()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_11()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3R_19() {
    if (jj_scan_token(ELEVADO)) return true;
    return false;
  }

  static private boolean jj_3R_35() {
    if (jj_scan_token(BINARIO)) return true;
    return false;
  }

  static private boolean jj_3_7() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_18() {
    if (jj_scan_token(42)) return true;
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3_6() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_17() {
    if (jj_3R_22()) return true;
    return false;
  }

  static private boolean jj_3_5() {
    if (jj_3R_9()) return true;
    return false;
  }

  static private boolean jj_3R_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3_5()) {
    jj_scanpos = xsp;
    if (jj_3_6()) {
    jj_scanpos = xsp;
    if (jj_3_7()) return true;
    }
    }
    return false;
  }

  static private boolean jj_3R_16() {
    if (jj_scan_token(MINUS)) return true;
    return false;
  }

  static private boolean jj_3R_12() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_16()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_17()) {
    jj_scanpos = xsp;
    if (jj_3R_18()) return true;
    }
    xsp = jj_scanpos;
    if (jj_3R_19()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_7() {
    if (jj_scan_token(42)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_scan_token(10)) {
    jj_scanpos = xsp;
    if (jj_scan_token(11)) {
    jj_scanpos = xsp;
    if (jj_scan_token(12)) {
    jj_scanpos = xsp;
    if (jj_scan_token(13)) {
    jj_scanpos = xsp;
    if (jj_scan_token(14)) {
    jj_scanpos = xsp;
    if (jj_scan_token(15)) {
    jj_scanpos = xsp;
    if (jj_scan_token(16)) {
    jj_scanpos = xsp;
    if (jj_scan_token(17)) {
    jj_scanpos = xsp;
    if (jj_scan_token(18)) {
    jj_scanpos = xsp;
    if (jj_scan_token(19)) {
    jj_scanpos = xsp;
    if (jj_scan_token(20)) {
    jj_scanpos = xsp;
    if (jj_scan_token(21)) {
    jj_scanpos = xsp;
    if (jj_scan_token(22)) {
    jj_scanpos = xsp;
    if (jj_scan_token(23)) {
    jj_scanpos = xsp;
    if (jj_scan_token(24)) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_34() {
    if (jj_scan_token(OCTAL)) return true;
    return false;
  }

  static private boolean jj_3R_5() {
    if (jj_scan_token(VARIABLE)) return true;
    if (jj_scan_token(IGUAL)) return true;
    return false;
  }

  static private boolean jj_3R_33() {
    if (jj_scan_token(DECIMAL)) return true;
    return false;
  }

  static private boolean jj_3R_31() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) {
    jj_scanpos = xsp;
    if (jj_3R_36()) return true;
    }
    }
    }
    return false;
  }

  static private boolean jj_3R_32() {
    if (jj_3R_29()) return true;
    return false;
  }

  static private boolean jj_3R_30() {
    if (jj_scan_token(44)) return true;
    return false;
  }

  static private boolean jj_3R_21() {
    if (jj_scan_token(DIVIDE)) return true;
    return false;
  }

  static private boolean jj_3R_28() {
    if (jj_3R_29()) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_30()) jj_scanpos = xsp;
    xsp = jj_scanpos;
    if (jj_3R_31()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_29() {
    if (jj_scan_token(DIGITO)) return true;
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_32()) jj_scanpos = xsp;
    return false;
  }

  static private boolean jj_3R_20() {
    if (jj_scan_token(MULTIPLY)) return true;
    return false;
  }

  static private boolean jj_3_4() {
    if (jj_3R_8()) return true;
    return false;
  }

  static private boolean jj_3R_13() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_20()) {
    jj_scanpos = xsp;
    if (jj_3R_21()) return true;
    }
    return false;
  }

  static private boolean jj_3R_10() {
    if (jj_3R_12()) return true;
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3R_13()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  static private boolean jj_3_3() {
    if (jj_3R_7()) return true;
    return false;
  }

  static private boolean jj_3R_27() {
    if (jj_scan_token(VARIABLE)) return true;
    return false;
  }

  static private boolean jj_3R_8() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(42)) return true;
    return false;
  }

  static private boolean jj_3_2() {
    if (jj_3R_6()) return true;
    return false;
  }

  static private boolean jj_3R_26() {
    if (jj_scan_token(I)) return true;
    return false;
  }

  static private boolean jj_3R_25() {
    if (jj_scan_token(E)) return true;
    return false;
  }

  static private boolean jj_3_1() {
    if (jj_3R_5()) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CalculadoraTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[18];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x2000040,0x2000040,0x60,0x60,0x180,0x180,0x40,0x0,0x200,0x0,0x0,0xc0000000,0xc0000000,0x0,0x1fffc00,0x1fffc00,0x4000000,0x1fffc00,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x6ec,0x6ec,0x0,0x0,0x0,0x0,0x0,0x4ec,0x0,0xec,0x1000,0x3,0x3,0x4,0x0,0x0,0x0,0x0,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[7];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Calculadora(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Calculadora(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CalculadoraTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Calculadora(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CalculadoraTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Calculadora(CalculadoraTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(CalculadoraTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 18; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[47];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 18; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 47; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 7; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
            case 6: jj_3_7(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
