/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */
options
{
  static = true;
}

PARSER_BEGIN(Calculadora)
package Calculadora;
import Tools.Complejo;
import Tools.ExcepcionDivideCero;

import java.io.DataInputStream;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.net.Socket;
import static java.lang.Math.pow;

import java.util.*;

class Monomio
{
  public Double coeficiente;

  public Integer grado;

  public Monomio(Double c, Integer g)
  {
    this.coeficiente = c;
    this.grado = g;
  }
}

;

public class Calculadora
{
  static HashMap < String, Complejo > variables = new HashMap < String, Complejo > ();

  public static void main(String args []) throws ParseException
  {
    Calculadora parser = new Calculadora(System.in);
    while (true)
    {

      System.out.println("");
      System.out.println("---------------------------------------------------------------------------------------------------------------");
      System.out.println("------------------------------------------------| CALCULADORA |------------------------------------------------");
      System.out.println("---------------------------------------------------------------------------------------------------------------");
      System.out.println("");
      System.out.println("Inicio (\"Help;\" abre la ayuda):");
      try
      {
        Calculadora.sesion();
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        Calculadora.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  public static boolean compara(String comparador, Complejo exp1, Complejo exp2)
  {
    boolean resultado = false;
    switch (comparador)
    {
      case ">" :
      resultado = (exp1.getReal() > exp2.getReal() || exp1.getImag() > exp2.getImag());
      break;
      case "<" :
      resultado = (exp1.getReal() < exp2.getReal() || exp1.getImag() < exp2.getImag());
      break;
      case "==" :
      resultado = (exp1.getReal() == exp2.getReal() && exp1.getImag() == exp2.getImag());
      break;
      case ">=" :
      resultado = (exp1.getReal() >= exp2.getReal() || exp1.getImag() >= exp2.getImag());
      break;
      case "<=" :
      resultado = (exp1.getReal() <= exp2.getReal() || exp1.getImag() <= exp2.getImag());
      break;
      case ">NS" :
      resultado = (exp1.getReal() > exp2.getReal() || exp1.getImag() > exp2.getImag());
      break;
      case "<NS" :
      resultado = (exp1.getReal() < exp2.getReal() || exp1.getImag() < exp2.getImag());
      break;
      case "==NS" :
      resultado = (exp1.getReal() == exp2.getReal() || exp1.getImag() == exp2.getImag());
      break;
      case ">=NS" :
      resultado = (exp1.getReal() >= exp2.getReal() || exp1.getImag() >= exp2.getImag());
      break;
      case "<=NS" :
      resultado = (exp1.getReal() <= exp2.getReal() || exp1.getImag() <= exp2.getImag());
      break;
      case ">S" :
      resultado = (exp1.getReal() > exp2.getReal() && exp1.getImag() > exp2.getImag());
      break;
      case "<S" :
      resultado = (exp1.getReal() < exp2.getReal() && exp1.getImag() < exp2.getImag());
      break;
      case ">=S" :
      resultado = (exp1.getReal() >= exp2.getReal() && exp1.getImag() >= exp2.getImag());
      break;
      case "<=S" :
      resultado = (exp1.getReal() <= exp2.getReal() && exp1.getImag() <= exp2.getImag());
      break;
      case ">R" :
      resultado = (exp1.getReal() > exp2.getReal());
      break;
      case "<R" :
      resultado = (exp1.getReal() < exp2.getReal());
      break;
      case "==R" :
      resultado = (exp1.getReal() == exp2.getReal());
      break;
      case ">=R" :
      resultado = (exp1.getReal() >= exp2.getReal());
      break;
      case "<=R" :
      resultado = (exp1.getReal() <= exp2.getReal());
      break;
      case ">I" :
      resultado = (exp1.getImag() > exp2.getImag());
      break;
      case "<I" :
      resultado = (exp1.getImag() < exp2.getImag());
      break;
      case "==I" :
      resultado = (exp1.getImag() == exp2.getImag());
      break;
      case ">=I" :
      resultado = (exp1.getImag() >= exp2.getImag());
      break;
      case "<=I" :
      resultado = (exp1.getImag() <= exp2.getImag());
      break;
    }
    return resultado;
  }
}

PARSER_END(Calculadora)

SKIP :
{
  " "
| "\t"
| "\r"
| "\n"
}

TOKEN : /* OPERATORS */
{
  < PLUS : "+" >
| < MINUS : "-" >
| < MULTIPLY : "*" >
| < DIVIDE : "/" >
| < ELEVADO : "^" >
}

TOKEN : /* COMPARATORS */
{
  < G : ">" >
| < L : "<" >
| < GEQ : ">=" >
| < LEQ : "<=" >
| < EQ : "==" >
| < GR : ">R" >
| < LR : "<R" >
| < GEQR : ">=R" >
| < LEQR : "<=R" >
| < EQR : "==R" >
| < GI : ">I" >
| < LI : "<I" >
| < GEQI : ">=I" >
| < LEQI : "<=I" >
| < EQI : "==I" >
}

TOKEN : /* INSTRUCCIONES */
{
  < IF :
    "si"
  | "Si" >
| < ELIF :
    /* "si no si"
  | "Si no si"
  | */"si no, si"
  | "Si no, si" >
| < THEN :
    "entonces"
  | "Entonces" >
| < ELSE :
    "si no"
  | "Si no" >
}

TOKEN : /* EOL */
{
  < EOLn : ";" >
}

TOKEN : /* BASE */
{
  < DECIMAL : "d" >
| < OCTAL : "o" >
| < BINARIO : "b" >
| < HEXADECIMAL : "h" >
}

TOKEN : /* DIGITS */
{
  < DIGITO : [ "0"-"9", "A"-"F" ] >
| < DIGITODECIMAL : [ "0"-"9" ] >
| < ENTERO : [ "0"-"9" ] >
}

TOKEN : /* VARIABLES */
{
  < VARIABLE :
    (< LETRA >)+
  | "$" >
| < LETRA : [ "a"-"z" ] >
}

TOKEN : /* I AND OTHERS */
{
  < I : "#i" >
| < E : "#e" >
| < PI : "#pi" >
}

TOKEN : /* EQUAL */
{
  < IGUAL : "=" >
}

TOKEN : /* POLINOMIOS */
{
  < ROOT : "#root" >
| < EXTENDEDROOT : "#extendedRoot" >
| < SINGLEROOT : "#singleRoot" >
| < TINDEPENDIENTE : "X" >
| < RESOLVE : "#resolve" >
}

TOKEN : /* HELP */
{
  < HELP : "Help" >
}

//Primer no terminal de la gramática, muestra las instrucciones de ayuda y contiene una sucesión de lineas.
void sesion() :
{
  String resultado;
  variables.clear();
  variables.put
  (
    "$", new Complejo()
  )
  ;
}
{
  (
    < HELP > < EOLn >
    {
      System.out.println("---------------------------------------------------------------------------------------------------------------");
      System.out.println("---------- INSTRUCCIONES DE LA CALCULADORA --------------------------------------------------------------------");
      System.out.println("---------------------------------------------------------------------------------------------------------------");
      System.out.println("------------ Instrucciones terminadas en \";\". -----------------------------------------------------------------");
      System.out.println("------------ Admite decimales, binarios, octales y hexadecimales, si los ponemos ------------------------------");
      System.out.println("------------ seguidos de d (por defecto), b, o y h. -----------------------------------------------------------");
      System.out.println("------------ Permite utilizar los valores e, i y pi con \'#e\', \'#i\' y \'#pi\' respectivamente. -------------------");
      System.out.println("------------ Soporta potencias de base compleja y exponente compleja. -----------------------------------------");
      System.out.println("------------ El \'.\' sirve para denotar decimales. -------------------------------------------------------------");
      System.out.println("------------ Las variables deben estar formadas \u00fanicamente por min\u00fasculas. ------------------------------------");
      System.out.println("------------ Soporta condicionales definidos de la siguiente forma:  ------------------------------------------");
      System.out.println("--------------------- si ([expresi\u00f3n] [comparador] [expresi\u00f3n]) entonces [expresi\u00f3n] --------------------------");
      System.out.println("--------------------- si no, si ([expresi\u00f3n] [comparador] [expresi\u00f3n]) entonces [expresi\u00f3n] -------------------");
      System.out.println("--------------------- si no [expresi\u00f3n] -----------------------------------------------------------------------");
      System.out.println("------------ Soporta tambi\u00e9n condicionales definidos de la siguiente forma:  ----------------------------------");
      System.out.println("--------------------- ([comparador],[expresi\u00f3n],[expresi\u00f3n]) [expresi\u00f3nS\u00ed] : [expresi\u00f3nNo] --------------------");
      System.out.println("------------ Por supuesto, soporta anidamiento de condicionales (incluso dentro de ----------------------------");
      System.out.println("------------ las propias condiciones). ------------------------------------------------------------------------");
	  System.out.println("------------ Permite hallar raï¿½ces de polinomios: ------------------------------------------------------------ ");
	  System.out.println("--------------------- \"#root(polinomio)\" halla todas las raï¿½ces.  -------------------------------------------- ");
	  System.out.println("--------------------- \"#extendedRoot(polinomio)\" halla todas las raï¿½ces y ofrece informaciï¿½n adicional.  ----- ");
	  System.out.println("--------------------- \"#singleRoot(polinomio, real)\" halla la raï¿½z mï¿½s cercana al real informado (puede) ----- ");
    System.out.println("--------------------- \"#resolve(polinomio, real)\" resuelve el polinomio sustituyendo x por el real ----- ");
	  System.out.println("--------------------- usarse como valor para expresiones y condicionales. ------------------------------------ ");
      System.out.println("---------------------------------------------------------------------------------------------------------------");
    }
  | resultado = linea()
    {
      System.out.println("> " + resultado);
    }
  )*
  < EOF >
  {
    System.out.println("Fin del c\u00e1lculo.");
  }
}

//No terminal de la gramatica llama entre varias opciones a una asignación, una expression, al no terminal raicesPolinomio y raicesPolinomioExtendido
String linea() :
{
  Complejo resultadoCmplx;
  String resultado;
}
{
  (
    LOOKAHEAD(2)
    resultadoCmplx = asignacion()
    {
      resultado = resultadoCmplx.toString();
    }
  | LOOKAHEAD(2)
    resultadoCmplx = expresion()
    {
      variables.replace("$", resultadoCmplx);
      resultado = resultadoCmplx.toString();
    }
  | LOOKAHEAD(2)
    raicesPolinomio()
    {
      resultado = "--- Fin de la informaciï¿½n sobre las raï¿½ces del polinomio. ---";
    }
  | LOOKAHEAD(2)
    raicesPolinomioExtendido()
    {
      resultado = "--- Fin de la informaciï¿½n sobre las raï¿½ces del polinomio. ---";
    }
  )
  < EOLn >
  {
    return resultado;
  }
}

//------- COMIENZO ASIGNACIï¿½N -------
//No terminal asignación donde verifica que haya una variable un simbolo igual y un expresion, asigna esa expresion a la variable en la tabla de variables.
Complejo asignacion() :
{
  Token variableToken;
  String variable;
  Complejo valor;
}
{
  variableToken = < VARIABLE >
  {
    variable = variableToken.image;
  }
  < IGUAL >
  valor = expresion()
  {
    variables.put(variable, valor);
  }
  {
    return valor;
  }
}

//------- COMIENZO EXPRESIï¿½N GENERAL (EXPRESIï¿½N NUMï¿½RICA O CONDICIONAL) -------
//No terminal donde puede ocurrir que haya una expresiones numéricas, un condicional1 o un condicional2
//De esta manera podemos anidar condicionales.
Complejo expresion() :
{
  Complejo resultado;
}
{
  (
    LOOKAHEAD(2)
    resultado = expresionNum()
  | LOOKAHEAD(2)
    resultado = condicional1()
  | LOOKAHEAD(2)
    resultado = condicional2()
  )
  {
    return resultado;
  }
}

//------- COMIENZO EXPRESIï¿½N NUMï¿½RICA -------
//Es te no terminal es muy similar al no terminal Expresion que se pedía originalmente en el ejercicio
//Devuelve un complejo (Recordemos que esta calculadora trabaja con complejos no con enteros) y verificar
//una sucesión de por lo menos un termino seguido de 0 o más signos "+" o "-" y otro termino.
Complejo expresionNum() :
{
  Complejo parcial;
  Complejo resultado;
  boolean resta;
}
{
  resultado = termino()
  (
    (
      < PLUS >
      {
        resta = false;
      }
    | < MINUS >
      {
        resta = true;
      }
    )
    parcial = termino()
    {
      resultado = resta ? Complejo.suma(resultado, Complejo.opuesto(parcial)) : Complejo.suma(resultado, parcial);
    }
  )*
  {
    return resultado;
  }
}

//------- COMIENZO SUMAS-PRODUCTOS -------
//No terminal similar al original del ejercicio verifica un factor, seguido de 0 o más simbolos "*" o "/" y un termino
//Devuelve el complejo resultado 
Complejo termino() :
{
  Complejo parcial;
  Complejo resultado;
  boolean division;
}
{
  resultado = factor()
  (
    (
      < MULTIPLY >
      {
        division = false;
      }
    | < DIVIDE >
      {
        division = true;
      }
    )
    parcial = factor()
    {
      try
      {
        resultado = division ? Complejo.cociente(resultado, parcial) : Complejo.producto(resultado, parcial);
      }
      catch (Exception e)
      {
        resultado = new Complejo();
        System.out.println("> Error");
      }
    }
  )*
  {
    return resultado;
  }
}

//No terminal que comienza opcionalmente con un signo negativo, un número complejo o una expresión entre paréntesis
//Que pueden estar elevados a otro factor de manera opcional, devuelve el resultado.
Complejo factor() :
{
  boolean negativo = false;
  Complejo resultadoComplejo;
  Complejo potencia;
}
{
  (
    (
    < MINUS >
    {
      negativo = true;
    }
    )?
    (
      resultadoComplejo = numero()
    |
      (
        "("
        resultadoComplejo = expresion()
        ")"
      )
    )
    {
      if (negativo) resultadoComplejo = Complejo.opuesto(resultadoComplejo);
    }
  )
  (
    < ELEVADO >
    potencia = factor()
    {
      resultadoComplejo = Complejo.potencia(resultadoComplejo, potencia);
    }
  )?
  {
    return resultadoComplejo;
  }
}

//------- COMIENZO Nï¿½MEROS -------
//Numero es un no terminal donde puede verificarse o un numeroNoSimbolico (no terminal que se explicará más adelante)
//O el número PI, o el E o el Imaginario, ademas puede ser la raiz simple de un polinomio (No terminal que se explicará más adelante)
//o el resultado de evaluar un polinomio
Complejo numero() :
{
  Token variableToken;
  double num;
}
{
  num = numeroNoSimbolico()
  {
    return new Complejo(num, 0);
  }
| < PI >
  {
    return new Complejo(3.141592653, 0);
  }
| < E >
  {
    return new Complejo(2.718281828, 0);
  }
| < I >
  {
    return new Complejo(0, 1);
  }
| variableToken = < VARIABLE >
  {
    return (variables.containsKey(variableToken.image)) ? variables.get(variableToken.image) : new Complejo();
  }
| num = raizPolinomioSimple()
{
	return new Complejo(num, 0);
}
| num = resolverPolinomio()
{
	return new Complejo(num, 0);
}
}

//Este es similar al no terminal Numero de la gramatica del ejercicio original
//En este caso se espera un terminal cifras seguido opcionalmente de un punto y más cifras.
//luego puede tener la terminación decimal "d" u octal "o" o binaria "b" o headecimal "h" en cada caso se transforma de manera precisa a base 10.
//Si no se especifica esta terminación se calcula como si fuese decimal.
double numeroNoSimbolico() :
{
  String numInt, numFrac = "", digitos;
  double numIntDecimal = 0;
  double numFracDecimal = 0;
  int cifra;
}
{
  numInt = cifras()
  (
    "."
    numFrac = cifras()
  )?
  (
    < DECIMAL >
    {
      for (int i = 0; i < numInt.length(); i++)
      {
        if (numInt.toCharArray() [ i ] - 65 >= 0) cifra = numInt.toCharArray() [ i ] - 55;
        else cifra = numInt.toCharArray() [ i ] - 48;
        numIntDecimal = numIntDecimal * 10 + cifra;
      }
      for (int j = numFrac.length() - 1; j >= 0; j--)
      {
        if (numFrac.toCharArray() [ j ] - 65 >= 0) cifra = numFrac.toCharArray() [ j ] - 55;
        else cifra = numFrac.toCharArray() [ j ] - 48;
        numFracDecimal = numFracDecimal / 10 + cifra;
      }
      return numIntDecimal + numFracDecimal / 10;
    }
  | < OCTAL >
    {
      for (int i = 0; i < numInt.length(); i++)
      {
        if (numInt.toCharArray() [ i ] - 65 >= 0) cifra = numInt.toCharArray() [ i ] - 55;
        else cifra = numInt.toCharArray() [ i ] - 48;
        numIntDecimal = numIntDecimal * 8 + cifra;
      }
      for (int j = numFrac.length() - 1; j >= 0; j--)
      {
        if (numFrac.toCharArray() [ j ] - 65 >= 0) cifra = numFrac.toCharArray() [ j ] - 55;
        else cifra = numFrac.toCharArray() [ j ] - 48;
        numFracDecimal = numFracDecimal / 8 + cifra;
      }
      return numIntDecimal + numFracDecimal / 8;
    }
  | < BINARIO >
    {
      for (int i = 0; i < numInt.length(); i++)
      {
        if (numInt.toCharArray() [ i ] - 65 >= 0) cifra = numInt.toCharArray() [ i ] - 55;
        else cifra = numInt.toCharArray() [ i ] - 48;
        numIntDecimal = numIntDecimal * 2 + cifra;
      }
      for (int j = numFrac.length() - 1; j >= 0; j--)
      {
        if (numFrac.toCharArray() [ j ] - 65 >= 0) cifra = numFrac.toCharArray() [ j ] - 55;
        else cifra = numFrac.toCharArray() [ j ] - 48;
        numFracDecimal = numFracDecimal / 2 + cifra;
      }
      return numIntDecimal + numFracDecimal / 2;
    }
  | < HEXADECIMAL >
    {
      for (int i = 0; i < numInt.length(); i++)
      {
        if (numInt.toCharArray() [ i ] - 65 >= 0) cifra = numInt.toCharArray() [ i ] - 55;
        else cifra = numInt.toCharArray() [ i ] - 48;
        numIntDecimal = numIntDecimal * 16 + cifra;
      }
      for (int j = numFrac.length() - 1; j >= 0; j--)
      {
        if (numFrac.toCharArray() [ j ] - 65 >= 0) cifra = numFrac.toCharArray() [ j ] - 55;
        else cifra = numFrac.toCharArray() [ j ] - 48;
        numFracDecimal = numFracDecimal / 16 + cifra;
      }
      return numIntDecimal + numFracDecimal / 16;
    }
  )?
  {
    for (int i = 0; i < numInt.length(); i++)
    {
      if (numInt.toCharArray() [ i ] - 65 >= 0) cifra = numInt.toCharArray() [ i ] - 55;
      else cifra = numInt.toCharArray() [ i ] - 48;
      numIntDecimal = numIntDecimal * 10 + cifra;
    }
    for (int j = numFrac.length() - 1; j >= 0; j--)
    {
      if (numFrac.toCharArray() [ j ] - 65 >= 0) cifra = numFrac.toCharArray() [ j ] - 55;
      else cifra = numFrac.toCharArray() [ j ] - 48;
      numFracDecimal = numFracDecimal / 10 + cifra;
    }
    return numIntDecimal + numFracDecimal / 10;
  }
}

//Este no terminal tiene un toke digito seguido opcionalmente de cifras.
//De vuelve el numero reconocido como tal.
String cifras() :
{
  Token d;
  String num, post;
}
{
  d = < DIGITO >
  {
    num = d.image;
  }
  (
    post = cifras()
    {
      num += post;
    }
  )?
  {
    return num;
  }
}

//------- COMIENZO CONDICIONAL: PRIMER TIPO -------
//Este condicional aunque biomodificado geneticamente, es similar al original del ejercicio
//Espera un token parentesis izquierdo un comparador dos expresiones separadas por tokens "," otro token parentesis derecho para cerrar, la epxpresión a ejecutar en el caso de que
//se cumpla la condición token ":" y expresión a ejecutar en caso contrario.
Complejo condicional1() :
{
  Token compToken;
  String comparador;
  boolean cond = true;
  Complejo exp1, exp2;
  Complejo expEntonces;
  Complejo expSiNo;
  Complejo resultado = null;
}
{
  "("
  (
    compToken = < G >
  | compToken = < L >
  | compToken = < GEQ >
  | compToken = < LEQ >
  | compToken = < EQ >
  | compToken = < GR >
  | compToken = < LR >
  | compToken = < GEQR >
  | compToken = < LEQR >
  | compToken = < EQR >
  | compToken = < GI >
  | compToken = < LI >
  | compToken = < GEQI >
  | compToken = < LEQI >
  | compToken = < EQI >
  )
  {
    comparador = compToken.image;
  }
  ","
  exp1 = expresion()
  ","
  exp2 = expresion()
  ")"
  {
    cond = Calculadora.compara(comparador, exp1, exp2);
  }
  expEntonces = expresion()
  {
    if (cond) resultado = expEntonces;
  }
  ":"
  expSiNo = expresion()
  {
    if (!cond) resultado = expSiNo;
  }
  {
    return resultado;
  }
}

//------- COMIENZO CONDICIONAL: SEGUNDO TIPO -------
//Este no terminal condicional es más similar al de un lenguaje de porgramación pero su sintaxis ha sido modificada para parecerse al pseudocódigo además de estar traducido
//Comienza con un token "si" un parentesis, una expresión el comparador otra expresión el parentesis que cierra la condición un token "entonces" la expresión a ejecutar en ese caso
//un token "si no si" y su condición similar al anterior entre paréntesis y la expresión a ejecutar en el caso de que se cumpliese ese else if y por ultimo el "si no" que es el else
//que contiene una expresión que se ejecutará en el caso de que ninguna otra condición se cumpla.
Complejo condicional2() :
{
  String comparador;
  Complejo exp1, exp2;
  Complejo entonces = new Complejo(), sino;
  int i = 0;
  boolean condicion = false;
  boolean condiciones [ ] = new boolean [ 50 ];
  Complejo entonceses [ ] = new Complejo [ 50 ];
}
{
  (
    < IF > "("
    exp1 = expresion()
    (
      comparador = < G >.image
    | comparador = < L >.image
    | comparador = < GEQ >.image
    | comparador = < LEQ >.image
    | comparador = < EQ >.image
    | comparador = < GR >.image
    | comparador = < LR >.image
    | comparador = < GEQR >.image
    | comparador = < LEQR >.image
    | comparador = < EQR >.image
    | comparador = < GI >.image
    | comparador = < LI >.image
    | comparador = < GEQI >.image
    | comparador = < LEQI >.image
    | comparador = < EQI >.image
    )
    exp2 = expresion()
    ")" < THEN >
    entonceses [ i ] = expresion()
  )
  {
    condiciones [ i ] = Calculadora.compara(comparador, exp1, exp2);
    ++i;
  }
  (
    < ELIF > "(" exp1 = expresion()
    (
      comparador = < G >.image
    | comparador = < L >.image
    | comparador = < GEQ >.image
    | comparador = < LEQ >.image
    | comparador = < EQ >.image
    | comparador = < GR >.image
    | comparador = < LR >.image
    | comparador = < GEQR >.image
    | comparador = < LEQR >.image
    | comparador = < EQR >.image
    | comparador = < GI >.image
    | comparador = < LI >.image
    | comparador = < GEQI >.image
    | comparador = < LEQI >.image
    | comparador = < EQI >.image
    )
    exp2 = expresion() ")" < THEN >
    entonceses [ i ] = expresion()
    {
      condiciones [ i ] = Calculadora.compara(comparador, exp1, exp2);
      ++i;
    }
  )*
  < ELSE >
  sino = expresion()
  {
    for (int j = 0; j < condiciones.length; ++j)
    {
      if (condiciones [ j ])
      {
        condicion = true;
        entonces = entonceses [ j ];
        break;
      }
    }
    if (condicion)
    return entonces;
    else
    return sino;
  }
}

//------- COMIENZO RAï¿½CES DE POLINOMIOS -------

//Este método contacta con el servidor y le envia un polinomio en forma de lista para calcular las raices,
//se comunica con el através de Streams y va mostrando los resultados.
//No olvideis usar flush() si usais sockets!
void raicesPolinomio() :
{
  ArrayList<Double> pol;
}
{
  < ROOT >
  "("
	pol = polinomio()
  ")"
  {
	//Aquï¿½ hallo las raï¿½ces
	try {
		Socket cliente = new Socket("localhost",48500);
		ObjectOutputStream out = new ObjectOutputStream(cliente.getOutputStream());
		out.writeObject(pol);
		out.flush();
		DataInputStream in = new DataInputStream(cliente.getInputStream());
		String cadena = in.readLine();
		//System.out.println(cadena);

		for(int i = 0; i < 5; i++) {
			cadena = in.readLine();
		}

		if(cadena.equals("No existen raices reales")) System.out.println("No existen raï¿½ces reales para el polinomio.");
		else {
			cadena = in.readLine();

			while(cadena!=null) {
				System.out.println(cadena);
				cadena = in.readLine();
			}
		}

	}catch(IOException e) {
	    System.out.println("Error en la conexiï¿½n con el servidor de cï¿½lculo de raï¿½ces.");
		//e.printStackTrace();
	}
  }
}

//Este es un no terminal muy similar al anterior pero muestra la información detallada del cálculo de las raices
//cotas minimas, derivadas y otros parámetros que ha tenido en cuenta.
void raicesPolinomioExtendido() :
{
  ArrayList<Double> pol;
}
{
  < EXTENDEDROOT >
  "("
	pol = polinomio()
  ")"
  {
	//Aquï¿½ hallo las raï¿½ces
	try {
		Socket cliente = new Socket("localhost",48500);
		ObjectOutputStream out = new ObjectOutputStream(cliente.getOutputStream());
		out.writeObject(pol);
		out.flush();
		DataInputStream in = new DataInputStream(cliente.getInputStream());
		String cadena = in.readLine();
		while(cadena!=null && !cadena.equals("No existen raices reales")) {
			System.out.println(cadena);
			cadena = in.readLine();
		}

		if(cadena.equals("No existen raices reales")) System.out.println("No existen raï¿½ces reales para el polinomio.");

	}catch(IOException e) {
	    System.out.println("Error en la conexiï¿½n con el servidor de cï¿½lculo de raï¿½ces.");
		//e.printStackTrace();
	}
  }
}

//Calcula la raiz más aproximada al numero que encuentra en el no terminal numeroNoSimbólico
double raizPolinomioSimple() :
{
  ArrayList<Double> pol;
  ArrayList<String> raices = new ArrayList<String>();
  double raizDevuelta;
  double diferencia;

  double numeroSimilar;

  boolean menos = false;
}
{
  < SINGLEROOT >
  "("
	pol = polinomio()
	","
	(
		< MINUS >
		{
			menos = true;
		}
	)?
	numeroSimilar = numeroNoSimbolico()
	{
		if(menos) numeroSimilar = -numeroSimilar;
	}
  ")"
  {
	//Aquï¿½ hallo las raï¿½ces
	try {
		Socket cliente = new Socket("localhost",48500);
		ObjectOutputStream out = new ObjectOutputStream(cliente.getOutputStream());
		out.writeObject(pol);
		out.flush();
		DataInputStream in = new DataInputStream(cliente.getInputStream());
		String cadena = in.readLine();
		//System.out.println(cadena);

		for(int i = 0; i < 5; i++) {
			cadena = in.readLine();
		}

		if(cadena.equals("No existen raices reales")) System.out.println("No existen raï¿½ces reales para el polinomio.");
		else {
			cadena = in.readLine();

			while(cadena!=null) {
//				System.out.println(cadena);
				raices.add(cadena.split(" Aprox: ")[0]);
				cadena = in.readLine();
			}
		}

		if(!raices.isEmpty()) {
			raizDevuelta = Double.parseDouble(raices.get(0));
			diferencia = Math.abs(Double.parseDouble(raices.get(0))-numeroSimilar);

			for(String raiz : raices) {
			  if(Math.abs(Double.parseDouble(raiz)-numeroSimilar) <  diferencia) {
				raizDevuelta = Double.parseDouble(raiz);
				diferencia = Math.abs(Double.parseDouble(raiz)-numeroSimilar);
			  }
			}
			return raizDevuelta;
		}

	}catch(IOException e) {
	    System.out.println("Error en la conexiï¿½n con el servidor de cï¿½lculo de raï¿½ces.");
		//e.printStackTrace();
	}
  }
}

//Método para resolver el polinomio, espera un número que sustituirá en las X para obtener el resultado.
double resolverPolinomio(): {  ArrayList<Double> pol;
                               double numeroSimilar, resultado=0;
                               boolean menos = false;}
{

  <RESOLVE> "(" pol = polinomio() ","

  (
		< MINUS >
		{
			menos = true;
		}
	)?
	numeroSimilar = numeroNoSimbolico()
	{
		if(menos) numeroSimilar = -numeroSimilar;
	}
  ")"

  {
    for(int i=0; i<pol.size(); i++){
      if(i == 0)
      	resultado += pol.get(0);
      else
      	resultado += pol.get(i)*pow(numeroSimilar,i);
    }

    return resultado;

  }



}

//------- COMIENZO POLINOMIO -------

//Este no terminal reconoce la secuencia de tokens de un polinomio y devulve la lista asociada a él
//En este caso es una sucesión de monomios.
ArrayList < Double > polinomio() :
{
  Monomio mon;
  HashMap < Integer, Double > pol = new HashMap < Integer, Double > ();
  ArrayList < Double > polArr = new ArrayList < Double > ();
  boolean resta = false;

  boolean menos = false;
}
{
  (
	< MINUS >
	{
		menos = true;
	}
  )?
  mon = monomio()
  {
    if(menos) pol.put(mon.grado, - mon.coeficiente);
    else pol.put(mon.grado, mon.coeficiente);
  }
  (
    (
      < PLUS >
    | < MINUS >
      {
        resta = true;
      }
    )
    mon = monomio()
    {
      if (resta) mon.coeficiente = - mon.coeficiente;
      resta = false;
      if (pol.containsKey(mon.grado)) pol.replace(mon.grado, pol.get(mon.grado) + mon.coeficiente);
      else pol.put(mon.grado, mon.coeficiente);
    }
  )*
  {
    Set < Integer > grados = pol.keySet();
    Integer maximo = 0;
    for (Integer g : grados) if (g > maximo) maximo = g;
    for (Integer grado = 0; grado <= maximo; grado++) polArr.add(pol.containsKey(grado) ? pol.get(grado) : (Integer) 0);
    return polArr;
  }
}

//No terminal monomio que se compone por el coeficiente, la X y el elvado. 
Monomio monomio() :
{
  Token gradoToken, coefEnteroToken, coefDecimalesToken;
  int coefDecimalesEntero;
  Double coefDecimales = 0.0;
  Monomio mon = new Monomio
  (
    (Double) 1.0, (Integer) 0
  )
  ;

  String numInt,numFrac;
  int numIntDecimal = 0;
  int cifra;
}
{
  (
    mon.coeficiente = numeroNoSimbolico()
  )?
  (
    < TINDEPENDIENTE >
    {
      mon.grado = 1;
    }
    (
      < ELEVADO >
      numInt = cifras()
	  (
	    "."
	    numFrac = cifras()
	  )?
	  {
      for (int i = 0; i < numInt.length(); i++)
      {
        if (numInt.toCharArray() [ i ] - 65 >= 0) cifra = numInt.toCharArray() [ i ] - 55;
        else cifra = numInt.toCharArray() [ i ] - 48;
        numIntDecimal = numIntDecimal * 10 + cifra;
      }
      mon.grado = numIntDecimal;
    }
    )?
  )?
  {
    return mon;
  }
}